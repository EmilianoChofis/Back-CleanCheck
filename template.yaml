AWSTemplateFormatVersion: 2010-09-09
Description: 'Simple Template for EC2 and RDS PostgreSQL with Secrets Manager'

Parameters:
  DBName:
    Type: String
    Default: cleancheck
  EC2InstanceType:
    Type: String
    Default: t2.large
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair
  ACCESS:
    Type: String
    Default: 'access'
    Description: 'The access key for the S3 bucket'
  KEY:
    Type: String
    Default: 'key'
    Description: 'The secret key for the S3 bucket'
  JWT:
    Type: String
    Default: 'jwt'
    Description: 'The JWT secret for the app'


Resources:
  # Secrets Manager for RDS credentials
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-db-credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ] ]
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '5'
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      PubliclyAccessible: true

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', ['cleancheck-', !Ref DBName, '-', !Ref "AWS::AccountId"] ]


  # EC2 Instance Role and Profile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Sub ${S3Bucket.Arn}/*
        - PolicyName: RDSSecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.large
      ImageId: ami-0fc3a637f48b2fdd4
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #cloud-boothook
          #!/bin/bash 
          
          #Clone the repository
          git clone https://github.com/EmilianoChofis/Back-CleanCheck.git /home/ubuntu/Back-CleanCheck
          
          #Set the directory for safe
          git config --global --add safe.directory /home/ubuntu/Back-CleanCheck
          
          #Blank environment
          cp /dev/null /etc/environment
          
          # Set environment variables
          echo "export DB_USERNAME=dbadmin" | sudo tee -a /etc/environment
          
          echo "export DB_HOST=${RDSInstance.Endpoint.Address}" | sudo tee -a /etc/environment
          echo "export DB_NAME=${DBName}" | sudo tee -a /etc/environment
          echo "export AWS_S3_BUCKET=${S3Bucket}" | sudo tee -a /etc/environment
          
          # Set environment variables from GitHub Secrets
          echo "export JWT_SECRET=${JWT}" | sudo tee -a /etc/environment
          echo "export AWS_ACCESS_KEY_ID=${ACCESS}" | sudo tee -a /etc/environment
          echo "export AWS_SECRET_ACCESS_KEY=${KEY}" | sudo tee -a /etc/environment
          
          
          # Establish environment variables
          aws secretsmanager get-secret-value --secret-id cleanCheckProd-db-credentials --region us-east-1 --query SecretString --output text > output.log 2>&1
          DB_SECRET=$(cat output.log)
          DB_PASSWORD=$(echo $DB_SECRET | jq -r .password)
          
          echo "export DB_PASSWORD=$DB_PASSWORD" | sudo tee -a /etc/environment
          
          # Copy environment variables to the app directory
          cp /etc/environment /home/ubuntu/Back-CleanCheck/.env
          
          #Change directory to the app
          cd /home/ubuntu/Back-CleanCheck
          
          # Docker compose build and run
          docker compose build --no-cache
          sleep 30
          docker compose up app -d
Outputs:
  EC2PublicIP:
    Description: Public IP of EC2 Instance
    Value: !GetAtt EC2Instance.PublicIp
  RDSEndpoint:
    Description: RDS Connection Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
  S3BucketName:
    Description: Name of S3 Bucket
    Value: !Ref S3Bucket
