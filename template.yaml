AWSTemplateFormatVersion: 2010-09-09
Description: 'Simple Template for EC2 and RDS PostgreSQL with Secrets Manager'

Parameters:
  DBName:
    Type: String
    Default: cleancheck
  EC2InstanceType:
    Type: String
    Default: t2.small
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair

Resources:
  # Secrets Manager for RDS credentials
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-db-credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dbadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ] ]
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '5'
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      PubliclyAccessible: false

  # EC2 Instance Role and Profile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: ami-0fc5d935ebf8bc3bc
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Actualizar el sistema
          yum update -y
          
          # Instalar dependencias necesarias
          yum install -y docker git unzip
          
          # Iniciar Docker y agregar ec2-user al grupo docker
          service docker start
          usermod -aG docker ec2-user
          
          # Instalar AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Clonar el repositorio del backend
          git clone https://github.com/EmilianoChofis/Back-CleanCheck.git /home/ec2-user/backend
          
          # Copiar docker-compose.yml al directorio del backend
          cp /home/ec2-user/docker-compose.yml /home/ec2-user/backend
          
          # Obtener credenciales de DB de Secrets Manager
          DB_SECRET=$(aws secretsmanager get-secret-value --secret-id ${DBSecret} --query SecretString --output text)
          DB_USERNAME=$(echo $DB_SECRET | jq -r .username)
          DB_PASSWORD=$(echo $DB_SECRET | jq -r .password)
          
          # Establecer variables de entorno
          echo "export DB_HOST=${RDSInstance.Endpoint.Address}" >> /etc/environment
          echo "export DB_USERNAME=$DB_USERNAME" >> /etc/environment
          echo "export DB_PASSWORD=$DB_PASSWORD" >> /etc/environment
          echo "export DB_NAME=${DBName}" >> /etc/environment

Outputs:
  EC2PublicIP:
    Description: Public IP of EC2 Instance
    Value: !GetAtt EC2Instance.PublicIp
  RDSEndpoint:
    Description: RDS Connection Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
